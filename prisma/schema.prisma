generator client {
        provider      = "prisma-client-js"
        binaryTargets = ["native"]
}

datasource db {
        provider = "sqlite"
        url      = env("DATABASE_PATH")
}

model drive {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        unique_id        String
        type             Int?      @default(0)
        name             String
        remark           String?
        avatar           String
        // json
        profile          String
        // 总大小
        total_size       Float?    @default(0)
        // 已使用
        used_size        Float?    @default(0)
        // 是否禁用
        invalid          Int?      @default(0)
        hidden           Int?      @default(0)
        sort             Int?      @default(0)
        // 最近一次索引该云盘的时间
        latest_analysis  DateTime?
        // 网盘用于存放影视剧的目录
        root_folder_name String?
        // 网盘用于存放影视剧的目录 file_id
        root_folder_id   String?

        drive_token_id String
        drive_token    drive_token @relation(fields: [drive_token_id], references: [id], onDelete: Cascade)
        user_id        String
        user           user        @relation(fields: [user_id], references: [id], onDelete: Cascade)

        drive_check_in drive_check_in[]
        files          file[]
        tmp_files      tmp_file[]

        @@unique([user_id, unique_id])
        @@map("Drive")
}

// 因为 refresh_token 需要经常更新所以单独拿出来作为表（这样合理吗？）
model drive_token {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // json
        data       String
        expired_at Float
        drives     drive[]

        @@map("DriveToken")
}

model novel_source {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        unique_id String
        name      String
        url       String
        rule      String @default("{}")

        user_id String
        user    user             @relation(fields: [user_id], references: [id])
        novels  searched_novel[]

        @@map("NovelSource")
}

model searched_novel {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        unique_id     String
        name          String
        url           String
        chapter_count Int    @default(0)

        profile_id String
        profile    novel_profile      @relation(fields: [profile_id], references: [id])
        source_id  String
        source     novel_source       @relation(fields: [source_id], references: [id])
        chapters   searched_chapter[]

        @@map("SearchedNovel")
}

model searched_chapter {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        unique_id String
        name      String
        url       String
        order     Int
        content   String?
        error     String?

        searched_novel_id  String
        searched_novel     searched_novel         @relation(fields: [searched_novel_id], references: [id])
        chapter_profile_id String?
        chapter_profile    novel_chapter_profile? @relation(fields: [chapter_profile_id], references: [id])
        histories          read_history[]

        @@map("SearchedNovelChapter")
}

// model novel_content {
//         id String @id

//         unique_id String
//         text      String

//         chapter_id String           @unique
//         chapter    searched_chapter @relation(fields: [chapter_id], references: [id])

//         @@map("SearchedNovelChapterContent")
// }

model novel_profile {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        name          String
        overview      String
        cover_path    String
        // 最新章节总数
        chapter_count Int
        in_production Int

        author_id String
        author    author @relation(fields: [author_id], references: [id])

        novel_section_profiles novel_section_profile[]
        novel_chapter_profiles novel_chapter_profile[]
        novels                 novel[]
        searched_novels        searched_novel[]

        @@map("NovelProfile")
}

model novel_section_profile {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        name  String
        order Int

        novel_profile_id String
        novel_profile    novel_profile           @relation(fields: [novel_profile_id], references: [id])
        chapter_profiles novel_chapter_profile[]

        @@map("NovelSectionProfile")
}

model novel_chapter_profile {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        name       String
        order      Int
        text_count Int
        updated_at String

        novel_profile_id         String
        novel_profile            novel_profile         @relation(fields: [novel_profile_id], references: [id])
        novel_section_profile_id String
        novel_section_profile    novel_section_profile @relation(fields: [novel_section_profile_id], references: [id])
        // chapters   novel_chapter[]

        files     searched_chapter[]
        histories read_history[]

        @@map("NovelChapterProfile")
}

model author {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        name        String
        avatar_path String?

        novel_profiles novel_profile[]

        @@map("NovelAuthor")
}

model novel {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        name String

        novel_profile_id String
        novel_profile    novel_profile  @relation(fields: [novel_profile_id], references: [id])
        user_id          String
        user             user           @relation(fields: [user_id], references: [id])
        histories        read_history[]

        // chapters     novel_chapter[]

        @@map("Novel")
}

// model novel_chapter {
//         id String @id

//         name       String
//         order      Int
//         text_count Int
//         updated_at String

//         novel_id   String
//         novel      novel                 @relation(fields: [novel_id], references: [id])
//         profile_id String
//         profile    novel_chapter_profile @relation(fields: [profile_id], references: [id])

//         files     searched_chapter[]
//         histories read_history[]

//         @@map("NovelChapter")
// }

model media_genre {
        id   Int    @id @unique
        text String

        @@map("MediaGenre")
}

model media_country {
        id   String @id @unique
        text String

        @@map("MediaCountry")
}

model async_task {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        unique_id    String
        type         Int     @default(1)
        desc         String?
        percent      Float   @default(0)
        percent_text String?
        status       Int     @default(1)
        need_stop    Int     @default(0)
        error        String?

        output_id String @unique
        output    output @relation(fields: [output_id], references: [id], onDelete: Cascade)
        user_id   String
        user      user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("AsyncTask")
}

model output {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        filepath String?

        user_id String
        user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        async_task async_task?

        @@map("Output")
}

model read_history {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        text     String
        duration Float  @default(0)
        progress Float  @default(0)

        novel_id         String
        novel            novel                 @relation(fields: [novel_id], references: [id], onDelete: Cascade)
        novel_chapter_id String
        novel_chapter    novel_chapter_profile @relation(fields: [novel_chapter_id], references: [id], onDelete: Cascade)
        file_id          String
        file             searched_chapter      @relation(fields: [file_id], references: [id], onDelete: Cascade)
        member_id        String
        member           member                @relation(fields: [member_id], references: [id], onDelete: Cascade)

        @@map("PlayHistory")
}

// 一次分享资源获取记录
model shared_file {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())
        // 分享链接名称
        title   String?
        // 分享链接
        url     String
        pwd     String?

        user_id String
        user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("SharedFile")
}

// 云盘签到记录
model drive_check_in {
        id         String    @id
        created    DateTime  @default(now())
        updated    DateTime  @default(now())
        // 签到时间
        checked_at DateTime?

        drive_id String
        drive    drive  @relation(fields: [drive_id], references: [id], onDelete: Cascade)

        @@map("DriveCheckIn")
}

// 在后台转存后分享文件夹后，在这里会新增一条记录，下次自动索引网盘时仅索引该表内记录
// 以及 转存文件到索引云盘中间这段时间避免重复添加文件（这时候靠和 parent_paths/name 做唯一值避免重复）
// 两个作用都有
model tmp_file {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        type         Float   @default(2)
        // 文件夹/文件 名称
        name         String
        file_id      String?
        // 1文件 2文件夹 3未知
        parent_paths String

        drive_id String
        drive    drive  @relation(fields: [drive_id], references: [id], onDelete: Cascade)
        user_id  String
        user     user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("TmpFile")
}

model file {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // 文件 id
        file_id        String
        // 文件名称
        name           String
        // 父文件夹 file_id
        parent_file_id String
        // 文件路径
        parent_paths   String
        // 1文件 2文件夹 3未知
        type           Int     @default(3)
        // 文件大小
        size           Float   @default(0)
        md5            String?

        drive_id String
        drive    drive  @relation(fields: [drive_id], references: [id], onDelete: Cascade)
        user_id  String
        user     user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("File")
}

// @depracated
model log {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())
        title   String

        @@map("Log")
}

// 后台添加的成员
model member {
        id         String   @id
        created    DateTime @default(now())
        updated    DateTime @default(now())
        // 成员邮箱
        email      String?
        // 成员名字
        name       String?
        avatar     String?
        // 成员备注
        remark     String
        // 权限 json
        permission String?
        // 是否禁用
        disabled   Int      @default(0)
        // 软删除
        delete     Int      @default(0)

        inviter_id     String?
        // 邀请人
        inviter        member?        @relation("InviterToInvitees", fields: [inviter_id], references: [id])
        from_invite_id String?
        // 被谁邀请
        from_invite    member_invite? @relation("FromWhiceMemberInvite", fields: [from_invite_id], references: [id])
        user_id        String
        user           user           @relation(fields: [user_id], references: [id], onDelete: Cascade)

        setting         member_setting?
        tokens          member_token[]
        authentications member_authentication[]
        notifications   member_notification[]
        invitees        member[]                @relation("InviterToInvitees")
        invited_members member_invite[]
        histories       read_history[]

        @@unique([user_id, inviter_id, remark])
        @@map("Member")
}

// 这个是啥表？
model member_invite {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        content     String?
        expired_at  String
        count_limit Int?
        disabled    Int     @default(0)

        member_id       String
        member          member   @relation(fields: [member_id], references: [id], onDelete: Cascade)
        invited_members member[] @relation("FromWhiceMemberInvite")

        @@map("MemberInvite")
}

model member_authentication {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        provider      String
        provider_id   String
        provider_arg1 String?
        provider_arg2 String?

        member_id String
        member    member @relation(fields: [member_id], references: [id])

        @@map("MemberAuthentication")
}

model member_token {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // 成员授权凭证
        token      String
        // 该 token 是否被使用
        used       Float?  @default(0)
        // 过期时间
        expired_at String?
        invalid    Int     @default(0)

        // 关联 member 表
        member_id String
        member    member @relation(fields: [member_id], references: [id], onDelete: Cascade)

        @@map("MemberToken")
}

// 成员配置
model member_setting {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        // json
        data String

        member_id String @unique
        member    member @relation(fields: [member_id], references: [id], onDelete: Cascade)

        @@map("MemberSetting")
}

model permission {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        desc String
        code String

        user_id String
        user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("Permission")
}

model member_notification {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        unique_id String
        content   String?
        type      Int     @default(1)
        status    Int     @default(1)
        is_delete Int     @default(0)

        // 接收者
        member_id String
        member    member @relation(fields: [member_id], references: [id], onDelete: Cascade)

        @@map("MemberNotification")
}

model notification {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        unique_id String
        content   String?
        type      Int     @default(1)
        status    Int     @default(1)
        is_delete Int     @default(0)

        user_id String
        user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("Notification")
}

model statistics {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        data String @default("{}")

        user_id String @unique
        user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("Statistics")
}

// 三方授权凭证
model account {
        id                  String  @id
        type                String
        provider            String
        provider_account_id String
        refresh_token       String?
        access_token        String?
        expires_at          Int?
        token_type          String?
        scope               String?
        id_token            String?
        session_state       String?

        user_id String
        user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@unique([provider, provider_account_id])
        @@map("Account")
}

// 邮箱密码凭证
model credential {
        id       String  @id
        password String
        salt     String
        verified Boolean @default(false)
        email    String  @unique

        user_id String @unique
        user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("Credential")
}

model profile {
        id       String  @id
        nickname String?
        avatar   String?
        user_id  String  @unique
        user     user    @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("Profile")
}

// 用户配置
model settings {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        detail String?

        user_id String @unique
        user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)

        @@map("Settings")
}

model user {
        id      String   @id
        created DateTime @default(now())
        updated DateTime @default(now())

        credential    credential?
        profile       profile?
        settings      settings?
        statistics    statistics?
        accounts      account[]
        drives        drive[]
        async_task    async_task[]
        files         file[]
        members       member[]
        shared_files  shared_file[]
        tmp_files     tmp_file[]
        notifications notification[]
        outputs       output[]
        permission    permission[]
        novels        novel[]
        novel_sources novel_source[]

        @@map("User")
}
